generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Wallet {
  address   String        @id
  label     String        @default("")
  avatar    String        @default("")
  createdAt DateTime      @default(now())
  lastLogin DateTime?
  nonce     String        @unique @default(uuid())
  role      Role          @default(User)
  creator   Creator?
  comics    WalletComic[]
}

enum Role {
  Superadmin
  Admin
  User
}

model Creator {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  // password         String
  name             String    @unique
  slug             String    @unique
  thumbnail        String    @default("")
  avatar           String    @default("")
  banner           String    @default("")
  logo             String    @default("")
  description      String    @default("")
  flavorText       String    @default("")
  website          String    @default("")
  // twitter          String    @default("")
  // instagram          String    @default("")
  createdAt        DateTime  @default(now())
  deletedAt        DateTime?
  featuredAt       DateTime?
  verifiedAt       DateTime?
  popularizedAt    DateTime?
  emailConfirmedAt DateTime?
  comics           Comic[]
  wallet           Wallet    @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress    String    @unique
}

model Comic {
  name          String        @unique
  slug          String        @id
  isOngoing     Boolean       @default(true)
  thumbnail     String        @default("")
  pfp           String        @default("")
  logo          String        @default("")
  description   String        @default("")
  flavorText    String        @default("")
  website       String        @default("")
  twitter       String        @default("")
  discord       String        @default("")
  telegram      String        @default("")
  instagram     String        @default("")
  medium        String        @default("")
  tikTok        String        @default("")
  youTube       String        @default("")
  magicEden     String        @default("")
  openSea       String        @default("")
  updatedAt     DateTime      @updatedAt
  createdAt     DateTime      @default(now())
  deletedAt     DateTime?
  featuredAt    DateTime?
  verifiedAt    DateTime?
  publishedAt   DateTime?
  popularizedAt DateTime?
  genres        Genre[]
  issues        ComicIssue[]
  wallets       WalletComic[]
  creator       Creator       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     Int
}

model WalletComic {
  comic         Comic   @relation(fields: [comicSlug], references: [slug], onDelete: Cascade)
  comicSlug     String
  wallet        Wallet  @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  walletAddress String
  rating        Int?
  isSubscribed  Boolean @default(false)
  isFavourite   Boolean @default(false)
  isWhitelisted Boolean @default(false)
  // isReported Boolean @default(false)
  // isLiked    Boolean @default(false)

  @@id([comicSlug, walletAddress])
}

model Genre {
  name      String    @unique
  slug      String    @id
  image     String    @default("")
  deletedAt DateTime?
  comics    Comic[]
}

model ComicIssue {
  id            Int         @id @default(autoincrement())
  number        Int
  title         String
  slug          String
  description   String      @default("")
  flavorText    String      @default("")
  cover         String      @default("")
  soundtrack    String      @default("")
  magicEden     String      @default("")
  openSea       String      @default("")
  releaseDate   DateTime
  createdAt     DateTime    @default(now())
  deletedAt     DateTime?
  featuredAt    DateTime?
  verifiedAt    DateTime?
  publishedAt   DateTime?
  popularizedAt DateTime?
  comic         Comic       @relation(fields: [comicSlug], references: [slug], onDelete: Cascade)
  comicSlug     String
  pages         ComicPage[]
  nfts          NFT[]

  @@unique([number, comicSlug])
  @@unique([slug, comicSlug])
  @@unique([title, comicSlug])
}

model NFT {
  mint         String     @id
  comicIssue   ComicIssue @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
  comicIssueId Int
}

model ComicPage {
  id            Int        @id @default(autoincrement())
  pageNumber    Int        @default(autoincrement())
  isPreviewable Boolean    @default(false)
  image         String
  altImage      String     @default("")
  comicIssue    ComicIssue @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
  comicIssueId  Int

  @@unique([pageNumber, comicIssueId])
}

// TODO v2
// - [COMIC] family ComicFamily
// - [COMIC] candyMachineIds Int[]
// - [COMIC_ISSUE] candyMachineIds Int[]
// - [COMIC_ISSUE] whitelist specific wallets

// - case insensitive slugs, emails etc. revise https://www.prisma.io/docs/concepts/components/prisma-client/case-sensitivity
