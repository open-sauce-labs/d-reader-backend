generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Wallet {
  address   String   @id
  name      String   @default("")
  avatar    String?
  createdAt DateTime @default(now())
  nonce     String   @unique @default(uuid())
  role      Role     @default(User)
}

enum Role {
  Superadmin
  Admin
  User
}

// TODO v1.1: connect wallets with email addresses
// model Creator {
//   address     String   @id
//   email       String   @unique
//   name        String
//   slug        String   @unique
//   updatedAt   DateTime @updatedAt
//   verifiedAt  DateTime
//   // bannerImage
//   image       String
//   logo        String
//   description String
//   // collections Collection[]
// }

model Collection {
  name        String    @id
  slug        String    @unique
  updatedAt   DateTime  @updatedAt
  verifiedAt  DateTime?
  // creator        Creator? @relation(fields: [creatorAddress], references: [address])
  // creatorAddress String
  thumbnail   String
  pfp         String
  logo        String?
  // categories Category[]
  // collectionFamily String
  description String    @default("")
  website     String    @default("")
  twitter     String    @default("")
  discord     String    @default("")
  telegram    String    @default("")
  instagram   String    @default("")
  medium      String    @default("")
  tikTok      String    @default("")
  youTube     String    @default("")
  magicEden   String    @default("")
  openSea     String    @default("")
  nfts        NFT[]
  comics      Comic[]
  // candyMachineIds Int[]
}

model NFT {
  mint           String     @id
  collection     Collection @relation(fields: [collectionName], references: [name])
  collectionName String
}

// model WalletComic {
//   isFavorite Boolean
//   isWatching Boolean
//   isWished   Boolean
//   isLiked    Boolean
// }

model Comic {
  id             Int         @id @default(autoincrement())
  title          String
  flavorText     String      @default("")
  description    String      @default("")
  cover          String
  // thumbnail      String
  // categories Category[]
  issueNumber    Int         @default(1)
  releaseDate    DateTime
  // TODO v2: token gate comics by a specific hashlist
  // e.g. you might wanna limit your comic to a subset of your holders
  // or get into a collaboration with another collection (hashlist)
  // TODO v2: also support whitelisting wallet addresses
  collection     Collection? @relation(fields: [collectionName], references: [name])
  collectionName String
  soundtrack     String?
  pages          ComicPage[]
}

model ComicPage {
  id            Int     @id @default(autoincrement())
  pageNumber    Int     @default(autoincrement())
  chapterNumber Int
  isPreviewable Boolean @default(false)
  image         String
  altImage      String?
  comic         Comic   @relation(fields: [comicId], references: [id])
  comicId       Int

  @@unique([pageNumber, chapterNumber, comicId])
}
