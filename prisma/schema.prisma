generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Wallet {
  id        Int       @id @default(autoincrement())
  address   String    @unique
  label     String    @default("")
  avatar    String    @default("")
  createdAt DateTime  @default(now())
  lastLogin DateTime?
  nonce     String    @unique @default(uuid())
  role      Role      @default(User)
  creator   Creator?
  // whitelistedComicIssues ComicIssueWhitelist[]
}

enum Role {
  Superadmin
  Admin
  User
}

model Creator {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  // password         String
  name             String    @unique
  slug             String    @unique
  thumbnail        String    @default("")
  avatar           String    @default("")
  banner           String    @default("")
  logo             String    @default("")
  description      String    @default("")
  flavorText       String    @default("")
  website          String    @default("")
  // twitter          String    @default("")
  // instagram          String    @default("")
  createdAt        DateTime  @default(now())
  deletedAt        DateTime?
  featuredAt       DateTime?
  verifiedAt       DateTime?
  popularizedAt    DateTime?
  emailConfirmedAt DateTime?
  comics           Comic[]
  wallet           Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId         Int       @unique
}

model Comic {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  slug          String       @unique
  isOngoing     Boolean      @default(true)
  thumbnail     String       @default("")
  pfp           String       @default("")
  logo          String       @default("")
  description   String       @default("")
  flavorText    String       @default("")
  website       String       @default("")
  twitter       String       @default("")
  discord       String       @default("")
  telegram      String       @default("")
  instagram     String       @default("")
  medium        String       @default("")
  tikTok        String       @default("")
  youTube       String       @default("")
  magicEden     String       @default("")
  openSea       String       @default("")
  updatedAt     DateTime     @updatedAt
  createdAt     DateTime     @default(now())
  deletedAt     DateTime?
  featuredAt    DateTime?
  verifiedAt    DateTime?
  publishedAt   DateTime?
  popularizedAt DateTime?
  // TODO v1.1: categories    ComicCategory[]
  // TODO v1.1: nfts          NFT[]
  // TODO v1.1: whitelist     Wallet[]
  issues        ComicIssue[]
  creator       Creator      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     Int
}

// model ComicStarRating {
//   id       Int    @id @default(autoincrement())
//   comic    Comic  @relation(fields: [comicId], references: [id], onDelete: Cascade)
//   comicId  Int
//   wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
//   walletId Int
//   rating   Int

//   @@unique([comicId, walletId])
// }

// model ComicIssueStarRating {
//   id           Int        @id @default(autoincrement())
//   comicIssue   ComicIssue @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
//   comicIssueId Int
//   wallet       Wallet     @relation(fields: [walletId], references: [id], onDelete: Cascade)
//   walletId     Int
//   rating       Int

//   @@unique([comicIssueId, walletId])
// }

// model WalletComic {
//   isSubscribed Boolean //   subscribedAt DateTime
//   isFavourite  Boolean //   favouritedAt DateTime
//   isWatching   Boolean //   watchedAt    DateTime
//   isReported   Boolean //   reportedAt   DateTime
//   isWished     Boolean //   wishedAt     DateTime
//   isLiked      Boolean //   likedAt      DateTime
// }

model ComicIssue {
  id            Int         @id @default(autoincrement())
  number        Int
  title         String
  slug          String
  description   String      @default("")
  flavorText    String      @default("")
  cover         String      @default("")
  soundtrack    String      @default("")
  magicEden     String      @default("")
  openSea       String      @default("")
  releaseDate   DateTime
  createdAt     DateTime    @default(now())
  deletedAt     DateTime?
  featuredAt    DateTime?
  verifiedAt    DateTime?
  publishedAt   DateTime?
  popularizedAt DateTime?
  comic         Comic       @relation(fields: [comicId], references: [id], onDelete: Cascade)
  comicId       Int
  pages         ComicPage[]
  nfts          NFT[]
  // whitelist     ComicIssueWhitelist[]

  @@unique([number, comicId])
  @@unique([slug, comicId])
  @@unique([title, comicId])
}

// model ComicIssueWhitelist {
//   id           Int        @id @default(autoincrement())
//   comicIssue   ComicIssue @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
//   comicIssueId Int
//   wallet       Wallet     @relation(fields: [walletId], references: [id], onDelete: Cascade)
//   walletId     Int

//   @@unique([comicIssueId, walletId])
// }

model NFT {
  id           Int        @id @default(autoincrement())
  mint         String     @unique
  comicIssue   ComicIssue @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
  comicIssueId Int
}

model ComicPage {
  id            Int        @id @default(autoincrement())
  pageNumber    Int        @default(autoincrement())
  isPreviewable Boolean    @default(false)
  image         String
  altImage      String     @default("")
  comicIssue    ComicIssue @relation(fields: [comicIssueId], references: [id], onDelete: Cascade)
  comicIssueId  Int

  @@unique([pageNumber, comicIssueId])
}

// TODO v2
// - [COMIC] categories ComicCategory[]
// - [COMIC] family ComicFamily
// - [COMIC] candyMachineIds Int[]
// - [COMIC_ISSUE] whitelist additional NFTs
// - [COMIC_ISSUE] whitelist specific wallets
// - [COMIC_ISSUE] categories ComicCategory[]

// - case insensitive slugs, emails etc. revise https://www.prisma.io/docs/concepts/components/prisma-client/case-sensitivity
